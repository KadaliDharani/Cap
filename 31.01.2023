find largest value in each row:

class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> arr=new ArrayList<Integer>();
        Queue<TreeNode> q=new LinkedList<>();
        if(root==null){
            return arr;
        }
        q.add(root);
        while(!q.isEmpty()){
            int n=q.size();
            ArrayList<Integer> arr1=new ArrayList<Integer>();
            for(int i=0;i<n;i++){
                  TreeNode a=q.poll();
                  arr1.add(a.val);
                  if(a.left!=null){
                      q.add(a.left);
                  }
                  if(a.right!=null){
                      q.add(a.right);
                  }
            }
            int max=arr1.get(0);
            for(int j=1;j<arr1.size();j++){
                if(max<arr1.get(j)){
                    max=arr1.get(j);
                }
            }
            arr.add(max);
        }
        return arr;
    }
}

count complete tree nodes:

class Solution {
    int count=0;
    public int countNodes(TreeNode root) {
        if(root==null){
            return 0;
        }
        countNodes(root.left);
        count+=1;
        countNodes(root.right);
        return count;
    }
}

validate binary search tree:

class Solution {
    public boolean isValidBST(TreeNode root) {
        ArrayList<Integer> arr=new ArrayList<Integer>();
        int flag=0;
        iorder(root,arr);
        for(int i=1;i<arr.size();i++){
            if(arr.get(i-1)>=arr.get(i)){
                flag=1;
                break;
            }
        }
        if(flag==0){
            return true;
        }
        return false;
    }
    public void iorder(TreeNode root , ArrayList<Integer> arr){
        if(root==null){
            return;
        }
        iorder(root.left,arr);
        arr.add(root.val);
        iorder(root.right,arr);

    }

}

Kth largest element of BST:

class Solution
{
    // return the Kth largest element in the given BST rooted at 'root'
    public int kthLargest(Node root,int K)
    {
        //Your code here
        if(root==null){
            return 0;
        }
        ArrayList<Integer> arr=new ArrayList<Integer>();
        iorder(root,arr);
        int n=arr.size();
        return arr.get(n-K);
        
    }
    public void iorder(Node root,ArrayList<Integer> arr){
        if(root==null){
            return;
        }
        iorder(root.left,arr);
        arr.add(root.data);
        iorder(root.right,arr);
    }
}

Diameter of Binary Tree:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int diam=0;
    public int diameterOfBinaryTree(TreeNode root) {
        height(root);
        return diam;
    }
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=height(root.left);
        int right=height(root.right);
        diam=Math.max(diam,left+right);
        return Math.max(left,right)+1;
    }
}
