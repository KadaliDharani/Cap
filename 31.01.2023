

Kth largest element of BST:

class Solution
{
    // return the Kth largest element in the given BST rooted at 'root'
    public int kthLargest(Node root,int K)
    {
        //Your code here
        if(root==null){
            return 0;
        }
        ArrayList<Integer> arr=new ArrayList<Integer>();
        iorder(root,arr);
        int n=arr.size();
        return arr.get(n-K);
        
    }
    public void iorder(Node root,ArrayList<Integer> arr){
        if(root==null){
            return;
        }
        iorder(root.left,arr);
        arr.add(root.data);
        iorder(root.right,arr);
    }
}

Diameter of Binary Tree:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int diam=0;
    public int diameterOfBinaryTree(TreeNode root) {
        height(root);
        return diam;
    }
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=height(root.left);
        int right=height(root.right);
        diam=Math.max(diam,left+right);
        return Math.max(left,right)+1;
    }
}
