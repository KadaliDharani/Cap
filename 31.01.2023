

count complete tree nodes:

class Solution {
    int count=0;
    public int countNodes(TreeNode root) {
        if(root==null){
            return 0;
        }
        countNodes(root.left);
        count+=1;
        countNodes(root.right);
        return count;
    }
}

validate binary search tree:

class Solution {
    public boolean isValidBST(TreeNode root) {
        ArrayList<Integer> arr=new ArrayList<Integer>();
        int flag=0;
        iorder(root,arr);
        for(int i=1;i<arr.size();i++){
            if(arr.get(i-1)>=arr.get(i)){
                flag=1;
                break;
            }
        }
        if(flag==0){
            return true;
        }
        return false;
    }
    public void iorder(TreeNode root , ArrayList<Integer> arr){
        if(root==null){
            return;
        }
        iorder(root.left,arr);
        arr.add(root.val);
        iorder(root.right,arr);

    }

}

Kth largest element of BST:

class Solution
{
 
    public int kthLargest(Node root,int K)
    {
        //Your code here
        if(root==null){
            return 0;
        }
        ArrayList<Integer> arr=new ArrayList<Integer>();
        iorder(root,arr);
        int n=arr.size();
        return arr.get(n-K);
        
    }
    public void iorder(Node root,ArrayList<Integer> arr){
        if(root==null){
            return;
        }
        iorder(root.left,arr);
        arr.add(root.data);
        iorder(root.right,arr);
    }
}

Diameter of Binary Tree:


class Solution {
    int diam=0;
    public int diameterOfBinaryTree(TreeNode root) {
        height(root);
        return diam;
    }
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=height(root.left);
        int right=height(root.right);
        diam=Math.max(diam,left+right);
        return Math.max(left,right)+1;
    }
}
