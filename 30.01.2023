
merge of two binary trees:

 
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        TreeNode a=null;
        if(root1==null){
            return root2;
        }
        if(root2==null){
            return root1;
        }
        if(root1!=null && root2!=null){
            a=new TreeNode(root1.val+root2.val);
            a.left=mergeTrees(root1.left,root2.left);
            a.right=mergeTrees(root1.right,root2.right);
        }
        return a;


    }
}

max depth of binary trees:

class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        int left=maxDepth(root.left);
        int right=maxDepth(root.right);
        return Math.max(left,right)+1;
    }
}

sum of left leaves:

class Solution {
    int s=0;
    public int sumOfLeftLeaves(TreeNode root) {
      //  int s=0;
        if(root==null){
            return 0;
        }
        if(root.left!=null){
            if(root.left.left==null && root.left.right==null){
                s+=root.left.val;
            }
        }
        sumOfLeftLeaves(root.left);
        sumOfLeftLeaves(root.right);
        return s;
    }
}

Flatten Binary Tree to Linked List:

class Solution {
    public void flatten(TreeNode root) {
        if(root==null){
            return;
        }
        ArrayList<Integer> arr=new ArrayList<Integer>();
        flat(root,arr);
        TreeNode r=root;
         for(int i=1;i<arr.size();i++){
             TreeNode root2=new TreeNode(arr.get(i));
             r.left=null;
             r.right=root2;
             r=root2;
         }
         
    } 
    public void flat(TreeNode root,ArrayList<Integer> arr){
        if(root==null){
            return;
        }
         arr.add(root.val);
         flat(root.left,arr);
         flat(root.right,arr);
    }
}
