
Level order traversal:

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<TreeNode>();
        ArrayList<List<Integer>> arr=new ArrayList<List<Integer>>();
        if(root==null){
            return arr;
        }
        q.offer(root);
        while(!q.isEmpty()){
            ArrayList<Integer> arr1=new ArrayList<Integer>();
            int n=q.size();
            for(int i=0;i<n;i++){
                if(q.peek().left!=null){
                    q.offer(q.peek().left);
                }
                if(q.peek().right!=null){
                    q.offer(q.peek().right);
                }
                arr1.add(q.poll().val);
            }
            arr.add(arr1);
        }
        return arr;
    }
}

zigzag level order traversal:

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> arr=new ArrayList<List<Integer>>();
        Queue<TreeNode> q=new LinkedList<TreeNode>();
        if(root==null){
            return arr;
        }
        q.offer(root);
        int flag=0;
        while(q.size()!=0){
            int n=q.size();
            List<Integer> arr1=new ArrayList<Integer>();
            for(int i=0;i<n;i++){
                if(q.peek().left!=null){
                    q.offer(q.peek().left);
                }
                if(q.peek().right!=null){
                    q.offer(q.peek().right);
                }
                arr1.add(q.poll().val);
            }
            if(flag==0){
                arr.add(arr1);
                flag=1;
            }
            else{
                Collections.reverse(arr1);
                arr.add(arr1);
                flag=0;
            }
        }
        return arr;
    }
}


rightside view of binary tree:

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        List<Integer> arr=new ArrayList<Integer>();
        if(root==null){
            return arr;
        }
        q.add(root);
        while(!q.isEmpty()){
            int n=q.size();
            for(int i=0;i<n;i++){
                TreeNode curr=q.poll();
                if(i==n-1){
                    arr.add(curr.val);
                }
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
        }
        return arr;
    }
}

bottom left tree value:

class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        if(root==null){
            return 0;
        }
        ArrayList<Integer> arr=new ArrayList<>();
        q.add(root);
        while(!q.isEmpty()){
            int n=q.size();
            for(int i=0;i<n;i++){
                TreeNode t=q.poll();
                if(i==0){
                    arr.add(t.val);
                }
                if(t.left!=null){
                    q.add(t.left);
                }
                if(t.right!=null){
                    q.add(t.right);
            }
            }
        }
        return arr.get(arr.size()-1);
    }
}

